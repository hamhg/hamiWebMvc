package com.hami.sys.jdbc.audit.statement;

import com.hami.sys.context.ApplicationContextHolder;
import com.hami.sys.jdbc.audit.control.JdbcControlService;
import com.hami.sys.jdbc.audit.rs.ResultSetWrapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.sql.*;

/**
 * <pre>
 * <li>Program Name : StatementWrapper
 * <li>Description  :
 * <li>History      : 2018. 2. 19.
 * </pre>
 *
 * @author HHG
 */
public class StatementWrapper extends AbstractStatement implements Statement {
    private final Logger log = LoggerFactory.getLogger(this.getClass());
    protected Statement statement;
    protected long elapsedTime;

    public StatementWrapper(Statement statement) {
        super((String) null);
        this.statement = statement;
        if (ApplicationContextHolder.containsBean("jdbc.control")) {
            JdbcControlService jdbcControl = (JdbcControlService) ApplicationContextHolder.getBean("jdbc.control", JdbcControlService.class);

            try {
                this.statement.setFetchSize(jdbcControl.getFetchSize());
                this.statement.setQueryTimeout(jdbcControl.getQueryTimeout());
            } catch (SQLException e) {
                log.warn("Failed to set jdbc control properties");
            }
        }
    }

    public ResultSet executeQuery(String sql) throws SQLException {
        long startTime = System.currentTimeMillis();

        ResultSetWrapper rs;
        try {
            rs = new ResultSetWrapper(this.statement.executeQuery(sql), sql);
        } finally {
            this.executionCompleted(startTime, sql);
        }

        return rs;
    }

    public int executeUpdate(String sql) throws SQLException {
        long startTime = System.currentTimeMillis();

        int cnt;
        try {
            cnt = this.statement.executeUpdate(sql);
        } finally {
            this.executionCompleted(startTime, sql);
        }

        return cnt;
    }

    public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
        long startTime = System.currentTimeMillis();

        int cnt;
        try {
            cnt = this.statement.executeUpdate(sql, autoGeneratedKeys);
        } finally {
            this.executionCompleted(startTime, sql);
        }

        return cnt;
    }

    public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
        long startTime = System.currentTimeMillis();

        int cnt;
        try {
            cnt = this.statement.executeUpdate(sql, columnIndexes);
        } finally {
            this.executionCompleted(startTime, sql);
        }

        return cnt;
    }

    public int executeUpdate(String sql, String[] columnNames) throws SQLException {
        long startTime = System.currentTimeMillis();

        int cnt;
        try {
            cnt = this.statement.executeUpdate(sql, columnNames);
        } finally {
            this.executionCompleted(startTime, sql);
        }

        return cnt;
    }

    public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
        long startTime = System.currentTimeMillis();

        boolean flag;
        try {
            flag = this.statement.execute(sql, autoGeneratedKeys);
        } finally {
            this.executionCompleted(startTime, sql);
        }

        return flag;
    }

    public boolean execute(String sql, int[] columnIndexes) throws SQLException {
        long startTime = System.currentTimeMillis();

        boolean flag;
        try {
            flag = this.statement.execute(sql, columnIndexes);
        } finally {
            this.executionCompleted(startTime, sql);
        }

        return flag;
    }

    public boolean execute(String sql, String[] columnNames) throws SQLException {
        long startTime = System.currentTimeMillis();

        boolean flag;
        try {
            flag = this.statement.execute(sql, columnNames);
        } finally {
            this.executionCompleted(startTime, sql);
        }

        return flag;
    }

    public boolean execute(String sql) throws SQLException {
        long startTime = System.currentTimeMillis();

        boolean flag;
        try {
            flag = this.statement.execute(sql);
        } finally {
            this.executionCompleted(startTime, sql);
        }

        return flag;
    }

    public void close() throws SQLException {
        this.statement.close();
    }

    public int getMaxFieldSize() throws SQLException {
        return this.statement.getMaxFieldSize();
    }

    public void setMaxFieldSize(int max) throws SQLException {
        this.statement.setMaxFieldSize(max);
    }

    public int getMaxRows() throws SQLException {
        return this.statement.getMaxRows();
    }

    public void setMaxRows(int max) throws SQLException {
        this.statement.setMaxRows(max);
    }

    public void setEscapeProcessing(boolean enable) throws SQLException {
        this.statement.setEscapeProcessing(enable);
    }

    public int getQueryTimeout() throws SQLException {
        return this.statement.getQueryTimeout();
    }

    public void setQueryTimeout(int seconds) throws SQLException {
        this.statement.setQueryTimeout(seconds);
    }

    public void cancel() throws SQLException {
        this.statement.cancel();
    }

    public SQLWarning getWarnings() throws SQLException {
        return this.statement.getWarnings();
    }

    public void clearWarnings() throws SQLException {
        this.statement.clearWarnings();
    }

    public void setCursorName(String name) throws SQLException {
        this.statement.setCursorName(name);
    }

    public ResultSet getResultSet() throws SQLException {
        return this.statement.getResultSet();
    }

    public int getUpdateCount() throws SQLException {
        return this.statement.getUpdateCount();
    }

    public boolean getMoreResults() throws SQLException {
        return this.statement.getMoreResults();
    }

    public void setFetchDirection(int direction) throws SQLException {
        this.statement.setFetchDirection(direction);
    }

    public int getFetchDirection() throws SQLException {
        return this.statement.getFetchDirection();
    }

    public void setFetchSize(int rows) throws SQLException {
        this.statement.setFetchSize(rows);
    }

    public int getFetchSize() throws SQLException {
        return this.statement.getFetchSize();
    }

    public int getResultSetConcurrency() throws SQLException {
        return this.statement.getResultSetConcurrency();
    }

    public int getResultSetType() throws SQLException {
        return this.statement.getResultSetType();
    }

    public void addBatch(String sql) throws SQLException {
        this.statement.addBatch(sql);
    }

    public void clearBatch() throws SQLException {
        this.statement.clearBatch();
    }

    public int[] executeBatch() throws SQLException {
        long startTime = System.currentTimeMillis();

        int[] cnt;
        try {
            cnt = this.statement.executeBatch();
        } finally {
            this.executionCompleted(startTime, (String) null);
        }

        return cnt;
    }

    public Connection getConnection() throws SQLException {
        return this.statement.getConnection();
    }

    public boolean getMoreResults(int current) throws SQLException {
        return this.statement.getMoreResults();
    }

    public ResultSet getGeneratedKeys() throws SQLException {
        return this.statement.getGeneratedKeys();
    }

    public int getResultSetHoldability() throws SQLException {
        return this.statement.getResultSetHoldability();
    }

    public boolean isClosed() throws SQLException {
        return this.statement.isClosed();
    }

    public void setPoolable(boolean poolable) throws SQLException {
        this.statement.setPoolable(poolable);
    }

    public boolean isPoolable() throws SQLException {
        return this.statement.isPoolable();
    }

    @Override
    public void closeOnCompletion() throws SQLException {
        this.statement.close();
    }

    @Override
    public boolean isCloseOnCompletion() throws SQLException {
        return this.statement.isCloseOnCompletion();
    }

    public <T> T unwrap(Class<T> iface) throws SQLException {
        return this.statement.unwrap(iface);
    }

    public boolean isWrapperFor(Class<?> iface) throws SQLException {
        return this.statement.isWrapperFor(iface);
    }
}
